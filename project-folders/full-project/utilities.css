/* ################################### */
/* The Stack */
/* ################################### */
.stack>*+* {
    margin-block-start: var(--s1);
}

.stack-large>*+* {
    margin-block-start: var(--s3);
}

.stack-medium>*+* {
    margin-block-start: var(--s2);
}

.stack-small>*+* {
    margin-block-start: var(--s0)
}

.stack-rec *+* {
    margin-block-start: var(--s1);
}

/* ################################### */
/* The Box */
/* ################################### */
.box {
    padding: var(--padding-normal);
    border: solid var(--color-dark) var(--border-thick);
}

/* When a box is being used to separate it's children: */

/* This needs a more specific class than 'box' because of the need to adjust settings of it's children */
.box-separator {
    border: solid var(--color-dark) var(--border-thick);
}

/* To set padding on all children */
.box-separator>* {
    padding: var(--padding-normal);
}

/* To add only top border to every other child */
.box-separator>*+* {
    border-top: solid var(--color-dark) var(--border-thick);
}


/* ################################### */
/* The Center */
/* ################################### */
.center {
    box-sizing: var(--box-size, border-box);
    margin-inline: auto;
    padding-inline: var(--s2);
    max-inline-size: var(--measure);
}

.center-wo-content-box {
    margin-inline: auto;
    padding-inline: var(--s4);
    max-inline-size: var(--measure);
}

.flex-center {
    box-sizing: content-box;
    margin-inline: auto;
    padding-inline: var(--s4);
    max-inline-size: var(--measure);
    display: flex;
    flex-direction: column;
    align-items: center;
}

/* ################################### */
/* The Cluster */
/* ################################### */

/* Cluster */
.cluster {
    display: flex;
    flex-wrap: wrap;
    gap: 1rem;
    justify-content: var(--cluster-align, flex-start);
}

/* ################################### */
/* The Sidebar */
/* ################################### */

/* Sidebar */
.sidebar {
    display: flex;
    flex-wrap: wrap;
    gap: var(--s-1);
}

.sidebar :first-child {
    flex-basis: 20rem;
    /* This needs to be set to 1 so when it wraps it will expand to fill the space */
    flex-grow: 1;
}

.sidebar :last-child {
    flex-basis: 0;
    /* This value forces the width of the side-bar to be the size of its flex-basis value */
    flex-grow: 999;
    min-inline-size: 50%;
}

/* ################################### */
/* The Switcher */
/* ################################### */

/* Switcher */
.switcher {
    display: flex;
    flex-wrap: wrap;
    gap: var(--s-2);
    border-color: green;
    /* The threshold value is the point at which all the children elements will wrap and expand to fill the container, based how the flex-basis calculation works. */
    --threshold: 30rem;
}

.switcher>* {
    flex-grow: 1;
    /* This flex-basis is either negative, at which point it will not be applied and all children will spread evenly via the flex-grow value. Once the container is smaller than the set value, the minimum, which here is 50rem, then the elements will all wrap and fill the available space. */
    flex-basis: calc((var(--threshold) - 100%) * 999);
}

/* This uses the 'quantity query' CSS rule pattern to set any group of siblings over 5 to be 100% */
.switcher> :nth-last-child(n+5),
.switcher> :nth-last-child(n+5)~* {
    flex-basis: 100%;
}

/* ################################### */
/* The Cover */
/* ################################### */
.cover {
    display: flex;
    flex-direction: column;
    padding: 1rem;
    min-block-size: 50vh;
}

.cover>* {
    margin-block: 2rem;
}

.cover>.cover-center {
    margin-block: auto;
}

.cover> :first-child:not(.cover-center) {
    margin-block-start: 0;
}

.cover> :last-child:not(.cover-center) {
    margin-block-end: 0;
}

/* ################################### */
/* The Grid */
/* ################################### */
.grid {
    display: grid;
    grid-gap: 1rem;
}

@supports (width: min(250px, 100%)) {
    .grid {
        grid-template-columns: repeat(auto-fit, minmax(min(250px, 100%), 1fr));
    }
}

/* ################################### */
/* The Frame */
/* ################################### */
.frame {
    aspect-ratio: var(--a-r, 1 / 1);
    width: var(--width, 100%);
    overflow: hidden;
    display: flex;
    justify-content: center;
    align-items: center;
}

.frame>img,
.frame>video {
    inline-size: 100%;
    block-size: 100%;
    object-fit: cover;
}

/* ################################### */
/* The Reel */
/* ################################### */
.reel {
    display: flex;
    gap: 1rem;
    overflow-x: auto;
    scrollbar-color: var(--color-light) var(--color-dark);
}

.reel::-webkit-scrollbar {
    block-size: 1rem;
}

.reel::-webkit-scrollbar-track {
    background-color: var(--color-dark);
}

.reel::-webkit-scrollbar-thumb {
    background-color: var(--color-dark);
    background-image: linear-gradient(var(--color-dark) 0, var(--color-dark) 0.25rem, var(--color-light) 0.25rem, var(--color-light) 0.75rem, var(--color-dark) 0.75rem);
}

/* ################################### */
/* The Imposter */
/* ################################### */

.imposter-container {
    position: relative;
}

.imposter {
    position: var(--position, absolute);
    inset-block-start: 50%;
    inset-inline-start: 50%;
    transform: translate(-50%, -50%);
    background-color: cornflowerblue;
}

.imposter.contain {
    --margin: 0.5rem;
    overflow: auto;
    max-inline-size: calc(100% - (var(--margin) * 2));
    max-block-size: calc(100% - (var(--margin) * 2));
}

/* ################################### */
/* Other Utilities */
/* ################################### */

/* Padding Utilities */
.padding-large {
    padding: var(--padding-large);
}

.padding-normal {
    padding: var(--padding-normal);
}

.padding-small {
    padding: var(--padding-small);
}

/* Border Utilities */
.border-thick {
    border: solid var(--color-dark) var(--border-thick);
}

.border-thin {
    border: solid var(--color-dark) var(--border-thin);
}

/* Random Utilities */

/* Other useful utility declarations */
.text-align\:center {
    text-align: center;
}

/* for hiding content that we don't want visible, but we want accessible to screen readers */
.screen-reader-only {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border: 0;
}